#!/usr/bin/perl
# Author:  Bart Trojanowski <bart@jukie.net>
# Website: http://www.jukie.net/~bart/blog/urxvt-url-yank
# License: GPLv2

use strict;
use warnings;

use DBI;
use Data::Dumper;

my $url_matcher = qr{(
        (?:https?://|ftp://|news://|mailto:|file://|www\.)[a-zäöA-ZÄÖ0-9\-\@;\/?:&=%\$_.+!*\x27(),~#]+
        [a-zäöA-ZÄÖ0-9\-\@;\/?&=%\$_+!*\x27(~]   # exclude some trailing characters (heuristic)
)}x;

my $shortcuts = 'aeuidhts-;qjkxbmwvz';
# For keys like '-', the keysym name is 'minus' instead of '-'
# AFAICT there's no direct way to get the character, so add more entries here if necessary.
# Use the 'xev' program do discover keysym names.
my %keysym2char = (
    'minus'      =>  '-',
    'backslash'  =>  "\\",
    'adiaresis'  =>  'ä',
    'semicolon'  =>  ';',
);

my %keymap = (
    Escape  => 'cancel',
    Return  => 'open',
    y       => 'yank',
    n       => 'next',
    p       => 'prev',
);
my $mark_mode_active = 0;
my $url_selected = -1;
my %mod = ( 'control' => 0, 'shift' => 0 );
my $dbh = DBI->connect("dbi:SQLite:dbname=$ENV{HOME}/.urxvt/urls.sqlite", { RaiseError => 1 }) or die "Can't open URL database";
my $insert_url_query = $dbh->prepare('INSERT INTO urls VALUES (?);') or die "Can't prepare insert query";
my $is_visited_url_query = $dbh->prepare('SELECT COUNT(*) FROM urls WHERE url = ?;') or die "Can't prepare select query";
my $overlay;
my @urldb;

sub move_selection {
    my ($term, $dir) = @_;

    set_selection($term, $url_selected, 0);
    $url_selected = ($url_selected + $dir) % ($#urldb + 1);
    set_selection($term, $url_selected, 1);

    $term->want_refresh;
}

sub set_selection {
    my ($term, $index, $enable) = @_;
    my $url = $urldb[$index];

    for (my $i = 0; $i < scalar @{$url->{rend}}; $i++) {
        my $x = @{$url->{rend}}[$i];
        $x &= ~urxvt::RS_RVid;
        $x |= urxvt::RS_RVid if $enable;

        $x = urxvt::SET_BGCOLOR($x, 6) if (is_visited($url->{url}));
        @{$url->{rend}}[$i] = $x;
    }

    # If the URL starts at column 0, the shortcut is placed over the first character of the URL.
    if ($url->{col} == 0) {
        $overlay->set(1, $url->{row}, substr($url->{url}, 1), $url->{rend});
    } else {
        $overlay->set($url->{col}, $url->{row}, $url->{url}, $url->{rend});
    }
}

sub setup_overlay {
    my ($term) = @_;

    $overlay = $term->overlay(0, 0, $term->ncol, $term->nrow, 0, 0);

    for my $rowno (0 .. ($term->nrow - 1)) {
        my $line = $term->ROW_t($rowno);
        my $rend = $term->ROW_r($rowno);
        $overlay->set(0, $rowno, $line, $rend);

        while ($line =~ /($url_matcher)/og) {
            my ($url, $first, $last) = ($1, $-[1], $+[1] - 1);
            --$last if $url =~ s/["')]$//;

            my %tuple = (
                row => $rowno,
                col => $first,
                last => $last,
                url => $url,
                rend => [ @$rend[$first .. $last] ],
            );
            push @urldb, \%tuple;
        }

    }
    @urldb = reverse @urldb;
    my $i = 0;
    for (@urldb) {
        last if ($i >= length($shortcuts));

        my $col = $_->{col} - 1;
        # If the URL starts at column 0, the shortcut is placed over the first character of the URL.
        $col = 0 if ($col <= 0);
        my $shortcut = substr($shortcuts, $i, 1);

        $overlay->set($col, $_->{row}, $shortcut,
                [urxvt::SET_COLOR(0, 0, 3+8)]);
        $i++;
    }
    return scalar @urldb;
}

sub recolor_visited {
    my ($term, $url) = @_;

    for my $rowno (0 .. ($term->nrow - 1)) {
        my $line = $term->ROW_t($rowno);
        if (index($line, $url) != -1) {
            on_line_update($term, $rowno);
        }
    }
}

sub on_start {
    my ($term) = @_;

    $term->{have_Clipboard} = eval { require Clipboard; };
    if ($term->{have_Clipboard}) {
        import Clipboard;
    }

    $term->{browser} = $term->x_resource ("urlLauncher") || "x-www-browser";

    ()
}

sub on_button_release {
    my ($term, $event) = @_;

    my $mask = $term->ModLevel3Mask | $term->ModMetaMask |
                urxvt::ShiftMask | urxvt::ControlMask;

    if ($event->{button} == 2 && ($event->{state} & $mask) == 0) {
        my $row = $event->{row};
        my $col = $event->{col};

        my $line = $term->line ($row);
        my $text = $line->t;

        while ($text =~ /($url_matcher)/og) {
            my ($url, $first, $last) = ($1, $-[1], $+[1]);

            if($first <= $col && $last >= $col) {
                $url =~ s/["')]$//;
                $term->exec_async($term->{browser}, $url);
                return 1;
            }
        }
    }

    ()
}

sub set_visited {
    my ($url) = @_;
    $insert_url_query->execute($url) unless is_visited($url);
}

sub is_visited {
    my ($url) = @_;
    $is_visited_url_query->execute($url);
    my @result = $is_visited_url_query->fetchrow_array();
    return $result[0];
}

sub on_line_update {
    my ($term, $row) = @_;

    # Fetch the line that has changed.
    my $line = $term->line($row);
    my $text = $line->t;

    # Find and underline URLs.
    while ($text =~ /($url_matcher)/og) {
        my $url = $1;
        my $rend = $line->r;

        # Mark all characters as underlined. we _must_ not toggle underline, as
        # we might get called on an already-marked URL.
        my $underlineURLs = $term->x_resource ('underlineURLs') || 'false';
        if($underlineURLs eq 'true') {
            my ($first, $last) = ($-[1], $+[1] - 1);

            --$last if $url =~ s/["')]$//;

            for (@{$rend}[$first .. $last]) {
                $_ |= urxvt::RS_Uline;
                if (is_visited($url)) {
                    $_ = urxvt::SET_BGCOLOR($_, 6);
                }
            }

            $line->r($rend);
        }
    }

    ()
}

sub on_user_command {
    my ($term, $cmd) = @_;

    activate_mark_mode($term) if $cmd eq 'mark-yank-urls:activate_mark_mode';

    ()
}

sub on_key_press {
    my ($term, $event, $keysym, $octets) = @_;

    if ($keysym == 65507) {                     # <control>
        $mod{control} = 1;

    } elsif ($keysym == 65505) {                # <shift>
        $mod{shift} = 1;
    } elsif ($keysym == 0xffe9) {                # <alt>
        $mod{alt} = 1;
    }

    # Ignore all input when we are active.
    $mark_mode_active && return 1;

    ()
}

sub pick_selection {
    my ($term, $i) = @_;
    my $url = get_active_url($term, $i);
    $term->exec_async($term->{browser}, $url);
    set_visited($url);
    recolor_visited($term, $url);
    deactivate_mark_mode ($term);
}

sub on_key_release {
    my ($term, $event, $keysym, $octets) = @_;

    if ($mark_mode_active) {
        my $keystr = $term->XKeysymToString($keysym);
        my $evt = $keymap{$keystr} || 0;

        if ($evt eq 'cancel') {
            deactivate_mark_mode ($term);
        } elsif ($evt eq 'open') {
            pick_selection($term, $url_selected);
        } elsif ($keysym == 65507) {                # <control>
            $mod{control} = 0;
        } elsif ($keysym == 65505) {                # <shift>
            $mod{shift} = 0;
        } elsif ($keysym == 0xffe9) {                # <alt>
            $mod{alt} = 0;
        } elsif ($mod{control} && ($evt eq 'next' || $evt eq 'prev')) {
            my $dir = ($evt eq 'next') ? -1 : 1;
            move_selection($term, $dir);
        } elsif ($evt eq 'yank') {
            my $url = get_active_url($term, $url_selected);
            set_visited($url);
            do_copy ($term, $url);
            recolor_visited($term, $url);
            deactivate_mark_mode ($term);
        } elsif (!$mod{alt}) {
            my $keychar = $keysym2char{$keystr} || $keystr;
            my $i = index($shortcuts, $keychar);
            if ($i != -1 && $i <= $#urldb) {
                pick_selection($term, $i);
            }
        }
        return 1;
    }

    ()
}

sub get_active_url {
    my ($term, $i) = @_;

    return $urldb[$i]->{url};
}

sub do_copy {
    my ($term, $text) = @_;

    if ($term->{have_Clipboard}) {
        Clipboard->copy($text);
    } else {
        $text =~ s/\(["|><&()]\)/\\$1/;
        system ("echo -n \"$text\" | xclip -i");
    }
}

sub activate_mark_mode {
    my ($term) = @_;

    if ($mark_mode_active) {
        move_selection($term, 1);
    } elsif (setup_overlay($term)) {
        $overlay->show();
        $url_selected = 0;
        set_selection($term, $url_selected, 1);
        $mark_mode_active = 1;
    } else {
        $overlay->hide();
    }
}

sub deactivate_mark_mode {
    my ($term) = @_;

    $mark_mode_active = 0;
    @urldb = ();
    $overlay->hide();
    $term->want_refresh;
}

# vim: set et ts=4 sw=4:
